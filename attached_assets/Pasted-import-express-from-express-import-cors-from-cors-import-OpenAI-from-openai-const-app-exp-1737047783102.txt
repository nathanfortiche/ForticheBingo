import express from 'express';
import cors from 'cors';
import OpenAI from "openai";
const app = express();
const PORT = process.env.PORT || 3001;

const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY
});

app.use(express.json());
app.use(cors());
app.use(express.static('public'));  // Servir les fichiers statiques

app.get('/', (req, res) => {
    res.send('Serveur opérationnel !');
});

let GPT4 = async (message) => {
    const { data, response } = await openai.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: message,
    }).withResponse();

    if (data && data.choices && data.choices[0] && data.choices[0].message) {
        return data.choices[0].message.content;
    } else {
        throw new Error(`Réponse inattendue de l'API OpenAI. ${response.data}`);
    }
};

app.post('/getSuggestion', async (req, res) => {
    const { temperature, weatherCondition } = req.body;
    const GPT4Message = [
        { role: "system", content: "You are a monkey assistant named Toobo. You present the weather and speak like an 8-year-old child. Your answers are short and you recommend specific outfits, naming 3 to 4 clothing items/accessories. Be excited ! Only recommend hot weather clothes when it's 22 celcius and above, only recommend cold weather clothes when it's 10 celcius and below. You speak french" },
        { role: "user", content: `It's ${temperature} degrees celcius and the condition is ${weatherCondition}. How should I dress? Answer in French only. Answer specific clothing items. Be funny !` }
    ];

    try {
        const gptResponse = await GPT4(GPT4Message);
        res.json({ suggestion: gptResponse });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

app.get('/weather', (req, res) => {
    const location = req.query.location;
    const url = `https://api.openweathermap.org/data/2.5/weather?q=${location}&units=metric&lang=fr&appid=${process.env.API_KEY}`
    console.log(
        `Location searched: ${location}. Url: ${url}`
    );

    return fetch(url)
        .then(result => result.json()) // extract data
        .then(data => {
            res.json(data); // send it to the browser
        });
});

app.listen(PORT, () => {
    console.log(`API server started on http://localhost:${PORT}`);
});
