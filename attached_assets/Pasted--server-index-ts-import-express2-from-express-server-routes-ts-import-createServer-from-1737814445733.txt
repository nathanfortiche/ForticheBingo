// server/index.ts
import express2 from "express";

// server/routes.ts
import { createServer } from "http";

// server/api.ts
var resolutionsHandler = (_req, res) => {
  try {
    const mockResolutions = [
      { id: 1, text: "100k abonn\xE9s tiktok", status: "60,9k", position: 0 },
      { id: 2, text: "Cr\xE9er une app/un site que des gens utilisent", status: "3 apps commenc\xE9es, aucune publi\xE9e", position: 1 },
      { id: 3, text: "120kg d\xE9velopp\xE9 couch\xE9", status: "100kg (juillet 2024)", position: 2 },
      { id: 4, text: "Faire une collab avec un mus\xE9e/un magazine", status: "Pas commenc\xE9", position: 3 },
      { id: 5, text: "130 s\xE9ances de sport", status: "5", position: 4 },
      { id: 6, text: "Apprendre des pas de danse", status: "Pas commenc\xE9", position: 5 },
      { id: 7, text: "120 films vus", status: "3", position: 6 },
      { id: 8, text: "10 livres finis", status: "0", position: 7 },
      { id: 9, text: "Faire un tatouage", status: "Plein d'id\xE9es, bcp d'h\xE9sitation", position: 8 },
      { id: 10, text: "Faire/Planifier un voyage vers un pote expatri\xE9", status: "Pas commenc\xE9", position: 9 },
      { id: 11, text: "Faire 1 vid\xE9o long format bien r\xE9alis\xE9e (20+ minutes)", status: "Pas commenc\xE9", position: 10 },
      { id: 12, text: "100kg squat", status: "80kg (janv 2025)", position: 11 },
      { id: 13, text: "20k abonn\xE9s insta", status: "8816", position: 12 },
      { id: 14, text: "Passer le permis", status: "3 \xE9checs, plus le code", position: 13 },
      { id: 15, text: "Monter 5 nouveaux decks magic", status: "1 en cours", position: 14 },
      { id: 16, text: "Diamant soloQ", status: "Plat 1", position: 15 }
    ];
    res.json(mockResolutions);
  } catch (error) {
    console.error("Error fetching resolutions:", error);
    res.status(500).json({ message: "Error fetching resolutions" });
  }
};
var updateResolutionHandler = (req, res) => {
  try {
    const { text, status } = req.body;
    res.json({ message: "Updated successfully", text, status });
  } catch (error) {
    console.error("Error updating resolution:", error);
    res.status(500).json({ message: "Error updating resolution" });
  }
};

// server/routes.ts
function registerRoutes(app2) {
  app2.get("/api/admin4768932/status", (_req, res) => {
    res.json({ message: "Admin access granted" });
  });
  app2.get("/api/admin4768932/resolutions", resolutionsHandler);
  app2.put("/api/admin4768932/resolutions/:id", updateResolutionHandler);
  const httpServer = createServer(app2);
  return httpServer;
}

// server/vite.ts
import express from "express";
import fs from "fs";
import path2, { dirname as dirname2 } from "path";
import { fileURLToPath as fileURLToPath2 } from "url";
import { createServer as createViteServer, createLogger } from "vite";

// vite.config.ts
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import themePlugin from "@replit/vite-plugin-shadcn-theme-json";
import path, { dirname } from "path";
import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";
import { fileURLToPath } from "url";
var __filename = fileURLToPath(import.meta.url);
var __dirname2 = dirname(__filename);
var vite_config_default = defineConfig({
  plugins: [react(), runtimeErrorOverlay(), themePlugin()],
  resolve: {
    alias: {
      "@db": path.resolve(__dirname2, "db"),
      "@": path.resolve(__dirname2, "client", "src")
    }
  },
  root: path.resolve(__dirname2, "client"),
  build: {
    outDir: path.resolve(__dirname2, "dist/public"),
    emptyOutDir: true
  }
});

// server/vite.ts
import { nanoid } from "nanoid";
var __filename2 = fileURLToPath2(import.meta.url);
var __dirname3 = dirname2(__filename2);
var viteLogger = createLogger();
function log(message, source = "express") {
  const formattedTime = (/* @__PURE__ */ new Date()).toLocaleTimeString("en-US", {
    hour: "numeric",
    minute: "2-digit",
    second: "2-digit",
    hour12: true
  });
  console.log(`${formattedTime} [${source}] ${message}`);
}
async function setupVite(app2, server) {
  const vite = await createViteServer({
    ...vite_config_default,
    configFile: false,
    customLogger: {
      ...viteLogger,
      error: (msg, options) => {
        viteLogger.error(msg, options);
        process.exit(1);
      }
    },
    server: {
      middlewareMode: true,
      hmr: { server }
    },
    appType: "custom"
  });
  app2.use(vite.middlewares);
  app2.use("*", async (req, res, next) => {
    const url = req.originalUrl;
    try {
      const clientTemplate = path2.resolve(
        __dirname3,
        "..",
        "client",
        "index.html"
      );
      let template = await fs.promises.readFile(clientTemplate, "utf-8");
      template = template.replace(`src="/src/main.tsx"`, `src="/src/main.tsx?v=${nanoid()}"`);
      const page = await vite.transformIndexHtml(url, template);
      res.status(200).set({ "Content-Type": "text/html" }).end(page);
    } catch (e) {
      vite.ssrFixStacktrace(e);
      next(e);
    }
  });
}

// server/index.ts
import path3 from "path";
var app = express2();
app.use(express2.json());
app.use(express2.urlencoded({ extended: false }));
app.use((req, res, next) => {
  const start = Date.now();
  const path4 = req.path;
  let capturedJsonResponse = void 0;
  const originalResJson = res.json;
  res.json = function(bodyJson, ...args) {
    capturedJsonResponse = bodyJson;
    return originalResJson.apply(res, [bodyJson, ...args]);
  };
  res.on("finish", () => {
    const duration = Date.now() - start;
    if (path4.startsWith("/api")) {
      let logLine = `${req.method} ${path4} ${res.statusCode} in ${duration}ms`;
      if (capturedJsonResponse) {
        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
      }
      if (logLine.length > 80) {
        logLine = logLine.slice(0, 79) + "\u2026";
      }
      log(logLine);
    }
  });
  next();
});
(async () => {
  const server = registerRoutes(app);
  app.use((err, _req, res, _next) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";
    res.status(status).json({ message });
    throw err;
  });
  if (app.get("env") === "development") {
    await setupVite(app, server);
  } else {
    const staticPath = path3.resolve(__dirname, "public");
    app.use(express2.static(staticPath));
    app.get("*", (req, res, next) => {
      if (req.path.startsWith("/api")) {
        next();
      } else {
        res.sendFile(path3.resolve(staticPath, "index.html"));
      }
    });
  }
  const PORT = Number(process.env.PORT) || 5e3;
  server.listen(PORT, "0.0.0.0", () => {
    log(`serving on port ${PORT}`);
  });
})();